# CIT-95-21257-2024SP: Python Programming
# Miguel Quezada
# Date: 05/19/2025
# File: chatbot3_uses_langchain_and_streamlit.py
# ----------
# Description: Simple Python ChatGPT-powered Chatbot that uses OpenAI API Key, OpenAI's gpt-4o-mini model, LangChain and Streamlit. 
#              This chatbot has the ability to remember previous conversations.
#              This chatbot uses the LangChain framework and Streamlit library. They work together to make a better chatbot.
#              LangChain handles the complex conversational logic and integrations.
#              Streamlit provides the web interface to interact with the chatbot.
#              The user uses a web browser to interact with the chatbot in a web page generated by Streamlit.
# ----------
# ----------
# Steps to Run chatbot
# Prior to running this code Steps 1 through 4 should have been performed previously in your Python environment.
# If Steps 1 through 4 have aleady been performed, they can be skipped, otherwise start with Step 1.
#
# In the Terminal window navigate to my project directory then run these commands.
# Step 1 - Install the OpenAI Python library by running this command:
#          pip install openai
# Step 2 - Install LangChain framework in your python environment by running this command:
#          pip install langchain
# Step 3 - Install langchain-openai package in your python environment by running this command:
#          pip install langchain-openai
# Step 4 - Install the streamlit library in your python environment by running this command:
#          pip install streamlit
# Step 5 - serve the chatbot on streamlit using this command:     
#          streamlit run chatbot3_uses_langchain_and_streamlit.py
# Step 6 - Launch application url in web browser
#          After running the streamlit run command, the Streamlit application is now served up in the web browser, 
#          Open your favorite web brwoser and navigate to one of these urls. 
#          Local URL: http://localhost:8501 
#          Network URL: http://192.168.1.91:8501 
#          You should see a web page the chatbot's initial question "What type of chatbot would you like to create?" on the web page.
#          Underneath it, you should see a textbox. In the textbox is where you type your input for the chatbot.
#          After typing your input in the textbox, press enter on your keyboard to send the input to the chatbot. 
#          Then you will see chatbot's output show up on the web page.
# ----------

# Imports the Streamlit library.
import streamlit as st
# Imports the ConversationBufferMemory class from Langchain, used for storing conversation history.
from langchain.memory import ConversationBufferMemory
# Imports the ConversationChain class from Langchain, used for managing the conversational flow.
from langchain.chains import ConversationChain
# Imports the ChatOpenAI class from Langchain, used for interacting with OpenAI's chat models.
from langchain_openai import ChatOpenAI

# Prior to checking in my chatbot to the Class GitHub Repo I removed my API Key from here.
# Set your OpenAI API key here
openai.api_key = "YOUR OPENAI API KEY GOES HERE"

# Initialize LangChain components in session state
# Initialize the LangChain language model in Streamlit's session state if it doesn't exist.
if "llm" not in st.session_state:
    st.session_state["llm"] = ChatOpenAI(openai_api_key=openai_api_key, model_name="gpt-4o-mini")
# Initialize the LangChain conversation memory in Streamlit's session state if it doesn't exist.
if "memory" not in st.session_state:
    st.session_state["memory"] = ConversationBufferMemory()
# Initialize the LangChain conversation chain in Streamlit's session state if it doesn't exist.    
if "conversation" not in st.session_state:
    st.session_state["conversation"] = ConversationChain(
        llm=st.session_state["llm"],
        memory=st.session_state["memory"]
    )

# Streamlit UI
# Initializes the messages list in Streamlit's session state to store the conversation history.
if "messages" not in st.session_state:
    st.session_state["messages"] = []

# Check if the messages list in the session state is empty, indicating a new session.
if not st.session_state["messages"]:
    # Creates a text input field in the Streamlit app, asking the user what type of chatbot they want.
    system_msg = st.text_input("What type of chatbot would you like to create?", key="system_input")
    # Checks if the user has entered a system message and pressed Enter.
    if system_msg:
        # We might want to pass the system message to LangChain's memory or as a prompt
        # Appends the system message to the messages list with the role system.
        st.session_state["messages"].append({"role": "system", "content": system_msg})
        # Set ready flag to True in the session state to indicate that the system message has been received.
        st.session_state["ready"] = True
        # Displays a message in the Streamlit app confirming that the assistant is ready.
        st.write("Your new assistant is ready!")

# Check if the ready flag exists in the session state, meaning the chatbot is initialized.
if "ready" in st.session_state:
    # Iterates through each message in the 'messages' list stored in the session state.
    for message in st.session_state["messages"]:
        # Creates a chat input field in the Streamlit app, allowing the user to type a new message.
        prompt = st.chat_input("Say something:")
    # Checks if the user has entered a prompt and pressed Enter.
    if prompt:
        # Appends the user's prompt to the messages list with the role user.
        st.session_state["messages"].append({"role": "user", "content": prompt})
        # Use LangChain to get the response
        # Uses the LangChain conversation chain to get the assistant's response based on the user's input.
        with st.chat_message("assistant"):
            # Predicts the next turn in the conversation using the LangChain conversation chain.
            full_response = st.session_state["conversation"].predict(input=prompt)
            # Displays the assistant's full response using Markdown formatting.
            st.markdown(full_response)
        # Appends the assistant's full response to the messages list with the role assistant.
        st.session_state["messages"].append({"role": "assistant", "content": full_response})

# ---------- References ----------
#
# OpenAI API - API keys
# https://platform.openai.com/api-keys
# On this page is where we set up OpenAI API keys
#
# OpenAI API - Usage
# https://platform.openai.com/usage
# On this page is where we check the usage of the requests we have made using OpenAI Keys.
#
# OpenAI API - Limits
# https://platform.openai.com/settings/organization/limits
# When we purchase OpenAI credit or add our credit card, we can set the monthly 
# minimum and maximum limit amounts of usage on this page. 
# For example if we set a minimum limit of $10, when our usage reaches $10 then
# we would get a notification email saying our usage reached $10.
# For example if we set a maximum limit of $20, when our usage reaches $20 then
# we would get a notification email saying our usage reached $20. Once we reach
# the maximum limit, any further OpenAI requests would just fail in our chatbot until
# we purchase more credit our increase the limit.
#
# LangChain
# https://www.langchain.com 
# LangChain is a software framework that helps facilitate the integration of 
# large language models (LLMs) into applications.
#
# LangChain - Documentation
# https://python.langchain.com/docs/introduction
#
# LangChain - Tutorials
# https://python.langchain.com/docs/tutorials/
#
# LangChain - Build a Chatbot
# https://python.langchain.com/docs/tutorials/chatbot/
#
# How to Build Your Own Chatbot with LangChain and OpenAI
# https://medium.com/@tahreemrasul/how-to-build-your-own-chatbot-with-langchain-and-openai-f092822b6ba6
#
# A beginners guide to making a Custom LLM Chatbot app using python (Open AI)!
# https://medium.com/@nikicrow/how-to-make-a-custom-llm-chatbot-app-using-python-open-ai-68b32e93baf4
#
# Streamlit - Documentation
# https://docs.streamlit.io 
#
# Streamlit - Create your first app
# https://docs.streamlit.io/get-started/tutorials/create-an-app
#
# Streamlit - Fundamental concepts
# https://docs.streamlit.io/get-started/fundamentals
#
# ---------- References ----------
