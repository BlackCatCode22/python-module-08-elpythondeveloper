# CIT-95-21257-2024SP: Python Programming
# Miguel Quezada
# Date: 05/19/2025
# File: chatbot2_uses_streamlit.py
# ----------
# Description: Simple Python ChatGPT-powered Chatbot that uses OpenAI API Key, OpenAI's gpt-4o-mini model and Streamlit. 
#              In this chatbot I switched from OpenAI's gpt-3.5-turbo to their gpt-4o-mini model because it costs less per interaction.
#              See example costs in the comments at the end of this file.
#              This chatbot has the ability to remember previous conversations.
#              Instead of using the console for interaction, this chatbot uses the Streamlit library.
#              The user uses a web browser to interact with the chatbot in a web page generated by Streamlit.
# ----------
# ----------
# Steps to Run chatbot
# Prior to running this code Steps 1 and 2 should have been performed previously in your Python environment.
# If Steps 1 and 2 have aleady been performed, they can be skipped, otherwise start with Step 1.
#
# In the Terminal window navigate to my project directory then run these commands.
# Step 1 - Install the official OpenAI Python library by running this command:
#          pip install openai
# Step 2 - Install the streamlit library in my python environment by running this command:
#          pip install streamlit
# Step 3 - serve the chatbot on streamlit using this command:#         
#          streamlit run chatbot2_uses_streamlit.py
# Step 4 - Launch application url in web browser
#          After running the streamlit run command, the Streamlit application is now served up in the web browser, 
#          Open your favorite web brwoser and navigate to one of these urls. 
#          Local URL: http://localhost:8501 
#          Network URL: http://192.168.1.91:8501 
#          You should see a web page the chatbot's initial question "What type of chatbot would you like to create?" on the web page.
#          Underneath it, you should see a textbox. In the textbox is where you type your input for the chatbot.
#          After typing your input in the textbox, press enter on your keyboard to send the input to the chatbot. 
#          Then you will see chatbot's output show up on the web page.
# ----------

# Imports the OpenAI library, which provides access to OpenAI models.
import openai
# Imports the Streamlit library, used for creating interactive web applications.
import streamlit as st

# Prior to checking in my chatbot to the Class GitHub Repo I removed my API Key from here.
# Set your OpenAI API key here
openai.api_key = "YOUR OPENAI API KEY GOES HERE"

# ----- Start of if statement 1 -----
# Initializes the messages key in Streamlit's session state if it doesn't exist.
# This list will store the conversation history.
if "messages" not in st.session_state:
    st.session_state["messages"] = []
# ----- End of if statement 1 -----

# ----- Start of if statement 2 -----
# Get the initial system message from the user
# Checks if the messages list in the session state is empty, indicating a new session.
if not st.session_state["messages"]:
    # Creates a text input field in the Streamlit app, asking the user what type of chatbot they want.
    system_msg = st.text_input("What type of chatbot would you like to create?", key="system_input")
    # Checks if the user has entered a system message and pressed Enter.
    if system_msg:
        # Appends the system message to the messages list with the role system.
        st.session_state["messages"].append({"role": "system", "content": system_msg})
        # Sets a ready flag to True in the session state to indicate that the system message has been received.
        st.session_state["ready"] = True
        # Displays a message in the Streamlit app confirming that the assistant is ready.
        st.write("Your new assistant is ready!")
# ----- End of if statement 2 -----

# ----- Start of if statement 3 -----
# Checks if the ready flag exists in the session state, meaning the chatbot is initialized.
if "ready" in st.session_state:
    # ----- for loop -----
    # Display previous messages
    # Iterates through each message in the messages list stored in the session state.
    for message in st.session_state["messages"]:
        # Checks if the message role is user.
        if message["role"] == "user":
            # Creates a chat message container styled as the user's message.
            with st.chat_message("user"):
                # Displays the user's message content using Markdown formatting.
                st.markdown(message["content"])
        # Checks if the message role is assistant.
        elif message["role"] == "assistant":
            # Creates a chat message container styled as the assistant's message.
            with st.chat_message("assistant"):
                # Displays the assistant's message content using Markdown formatting.
                st.markdown(message["content"])
    # ----- for loop -----

    # Get user input and save it in a variable called prompt
    # Creates a chat input field in the Streamlit app, allowing the user to type a new message.
    prompt = st.chat_input("Say something:")
    # ----- Start of if statement 4 -----
    if prompt:
        # Appends the user's prompt to the messages list with the role user.
        st.session_state["messages"].append({"role": "user", "content": prompt})
        # Creates a chat message container styled as the user's message.
        with st.chat_message("user"):
            # Displays the user's prompt using Markdown formatting.
            st.markdown(prompt)

        # Generate and display the assistant's response
        # Creates a chat message container styled as the assistant's message.
        with st.chat_message("assistant"):
            # Creates an empty placeholder in the chat message area, which will be used to display the streaming response.
            message_placeholder = st.empty()
            # Initializes an empty string to store the full response from the assistant.
            full_response = ""
            # Calls the OpenAI API to create a chat completion with the gpt-4o-mini model.
            # It sends the entire conversation history stored in 'st.session_state["messages"]'.
            # The 'stream=True' parameter enables streaming the response as it's generated.
            for response in openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=st.session_state["messages"],
                stream=True,
            ):
                # Add a check to ensure delta.content is not None before concatenating:
                if response.choices[0].delta.content is not None:
                    # Extracts the content of the delta (the incremental change in the response) from the API response.
                    full_response += response.choices[0].delta.content
                    # Updates the message placeholder in the Streamlit app with the accumulating response, adding a blinking cursor.
                    message_placeholder.markdown(full_response + "â–Œ")                
            # Updates the message placeholder one last time to display the complete response without the cursor.
            message_placeholder.markdown(full_response)
         # Appends the assistant's full response to the messages list with the role assistant.
        st.session_state["messages"].append({"role": "assistant", "content": full_response})
    # ----- Start of if statement 4 -----

# ----- End of if statement 3 -----

# ---------- References ----------
#
# OpenAI API - API keys
# https://platform.openai.com/api-keys
# On this page is where we set up OpenAI API keys
#
# OpenAI API - Usage
# https://platform.openai.com/usage
# On this page is where we check the usage of the requests we have made using OpenAI Keys.
#
# OpenAI API - Limits
# https://platform.openai.com/settings/organization/limits
# When we purchase OpenAI credit or add our credit card, we can set the monthly 
# minimum and maximum limit amounts of usage on this page. 
# For example if we set a minimum limit of $10, when our usage reaches $10 then
# we would get a notification email saying our usage reached $10.
# For example if we set a maximum limit of $20, when our usage reaches $20 then
# we would get a notification email saying our usage reached $20. Once we reach
# the maximum limit, any further OpenAI requests would just fail in our chatbot until
# we purchase more credit our increase the limit.
#
# Streamlit - Documentation
# https://docs.streamlit.io 
#
# Streamlit - Create your first app
# https://docs.streamlit.io/get-started/tutorials/create-an-app
#
# Streamlit - Fundamental concepts
# https://docs.streamlit.io/get-started/fundamentals
#
# ---------- References ----------

# ---------- OpenAI's gpt-3.5-turbo Model Costs ----------
# These are the costs based on the most recent publicly available pricing 
# for the standard gpt-3.5-turbo model as of May 19, 2025.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Input Tokens (prompt): $0.50 per 1 million tokens
# Output Tokens (completion/response): $1.50 per 1 million tokens
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Total cost per interaction: = $0.00125
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# How many tokens do we get if we buy $10 worth of pre-purchased credit?
# Total tokens for $10 = 8,000 interactions * 1,500 tokens/interaction = 12,000,000 tokens
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# If we purchase $10 worth of credit and use the gpt-3.5-turbo Model we get 12,000,000 tokens
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ---------- OpenAI's gpt-3.5-turbo Model Costs ----------

# ---------- OpenAI's gpt-4o-mini Model Costs ----------
# These are the costs based on the most recent publicly available pricing 
# for the standard gpt-4o-mini model as of May 19, 2025.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Input Tokens (prompt): $0.15 per 1 million tokens
# Output Tokens (completion/response): $0.60 per 1 million tokens
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Total cost per interaction: $0.00045
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# How many tokens do we get if we buy $10 worth of pre-purchased credit?
# Total tokens for $10 = 22,222 interactions * 1,500 tokens/interaction = 33,333,000 tokens
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# If we purchase $10 worth of credit and use the gpt-4o-mini model we get 33,333,000 tokens
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ---------- OpenAI's gpt-3.5-turbo Model Costs ----------